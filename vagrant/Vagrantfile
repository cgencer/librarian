# -*- mode: ruby -*-
# vi: set ft=ruby :
$DEF_IF = `route -n get default | grep interface | awk '{print $2}'`

BOX_IMAGE = "minimal/centos7"
NODE_COUNT = 4
PORTS = Array({:a => "a", :b => "b"}) 
# Get Chef json
VAGRANT_JSON = JSON.parse(Pathname(__FILE__).dirname.join("vm-config.json").read)
PORTS = VAGRANT_JSON["ports"]

RL_0 = VAGRANT_JSON['packages']['node_0']['run_list']
RL_1 = VAGRANT_JSON['packages']['node_1']['run_list']
RL_2 = VAGRANT_JSON['packages']['node_2']['run_list']
RL_3 = VAGRANT_JSON['packages']['node_3']['run_list']

$userScript = <<SCRIPT
  cd /home/vagrant
  wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh
  # This enables NVM without a logout/login
  export NVM_DIR="/home/vagrant/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  nvm install stable
  # You can also install other stuff here
  npm install -g bower create-react-app
SCRIPT

$reverseProxy = <<-EOS
upstream backend {
	server localhost:8080;
}

server {
	listen 80 default_server;
	listen [::]:80 default_server ipv6only=on;

	server_name localhost;

	location / {
EOS

$bootScript = <<-SHELL
	systemctl stop postfix.service
	systemctl disable postfix.service
	yum update -y
	yum install -y wget vim nano net-tools initscripts gcc make tar bind-utils nc git unzip sysstat tree
SHELL

Vagrant.configure("2") do |config|

  config.trigger.after :up do |t|
    t.info = "Bringing up your Vagrant guest machine!"
    t.run = {inline: "vagrant vbguest --do install"}
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.installer_options = { allow_kernel_upgrade: true }
  end

  if Vagrant.has_plugin?("vagrant-omnibus")
	config.omnibus.chef_version = "latest"
  end

  if Vagrant.has_plugin?("vagrant-hostmanager")
	config.hostmanager.enabled = true
	config.hostmanager.manage_guest = true
	config.hostmanager.manage_host = true
	config.hostmanager.ignore_private_ip = false
	config.hostmanager.include_offline = true
	config.hostmanager.aliases = %w(
	  intranet.dev
	)
  end

  config.ssh.forward_agent = true

  (1..NODE_COUNT).each do |i|
    config.vm.define "node#{i}" do |subsystem|
      subsystem.vm.box = BOX_IMAGE
#	  subsystem.vm.hostname = "lin_#{i}.dev"

#	  subsystem.hostmanager.aliases = %w(node_#{i}.localdomain node_#{i})

	  subsystem.ssh.username = "vagrant"
	  subsystem.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
	  subsystem.ssh.insert_key = false

		#node[:Production][:ApplicationLayer][:DockerTag]

	  PORTS.each do |item|
	  	$nfo = item['nfo'].nil? ? item['nfo'] : 'tcp'
	  	if item['nod'] == i || item['nod'] == '-1'
			subsystem.vm.network :forwarded_port, 
				guest: item['gst'], 
				host: item['hst'], 
				id: $nfo, 
				auto_correct: true
		end
	  end

	  subsystem.vm.provider :vbox do |vbox, override|
		vbox.gui = false
        vbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vbox.customize ["modifyvm", :id, "--memory", 512]
        override.vm.box = 'CentOS 7 x64 Server'
        # override.vm.box_url = 'http://goo.gl/wxdwM'
      end

	  subsystem.vm.synced_folder ".", "/vagrant", disabled: true
	  subsystem.vm.synced_folder "../dist/", "/var/www/html"

	  subsystem.vm.network "public_network", bridge: "#$DEF_IF", ip: "192.168.1.#{i+100}", auto_correct: true

#	  subsystem.vm.provision "shell", inline: "echo -e $1 > /etc/nginx/conf.d/nginx.conf", args: "#{$reverseProxy} proxy_pass http://node_#{i};}}"
	  subsystem.vm.provision "shell", inline: "#{$bootScript}"

	  subsystem.vm.provision "chef_zero" do |chef|
	  	chef.log_level = "warn"
	    chef.install = false

	    chef.cookbooks_path = "./chef/cookbooks"
	    chef.data_bags_path = "./chef/data-bags"
	    chef.roles_path = "./chef/roles"
	    chef.environments_path = "./chef/environments"
	    chef.nodes_path = "./chef/nodes"

	    chef.environment = "dev"
	    chef.add_role "api"
	    chef.add_role "web"

	    chef.run_list = RL_0
	    chef.json = VAGRANT_JSON
	  end

	  subsystem.vm.provision "shell", inline: $userScript, privileged: false
	  subsystem.vm.provision "postchef", after: "chef", type: "shell", inline:<<-SHELL
	    echo 'chef installations completed.'
	  SHELL

    end
  end

  config.trigger.before :up do |t|
    t.info = "Bringing up your Vagrant guest machine!"
    t.run = {inline: "bash -c 'echo \"hey there!!\" > file.txt'"}
  end


end
