# -*- mode: ruby -*-
# vi: set ft=ruby :
$DEF_IF = `route -n get default | grep interface | awk '{print $2}'`
$DEF_IF = $DEF_IF.strip

BOX_IMAGE = "minimal/centos7"
NODE_COUNT = 4
# Get Chef json
VAGRANT_JSON = JSON.parse(Pathname(__FILE__).dirname.join("vm-config.json").read, { symbolize_names: true })
PATH_VAGRANT = Pathname(__FILE__).dirname

$userScript = <<SCRIPT
  cd /home/vagrant
  wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh
  # This enables NVM without a logout/login
  export NVM_DIR="/home/vagrant/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  nvm install stable
  # You can also install other stuff here
  npm install -g bower create-react-app
SCRIPT

$reverseProxy = <<-EOS
upstream backend {
	server localhost:8080;
}

server {
	listen 80 default_server;
	listen [::]:80 default_server ipv6only=on;

	server_name localhost;

	location / {
	}
}
EOS

$bootScript = <<-SHELL
	systemctl stop postfix.service
	systemctl daemon-reload
	systemctl disable postfix.service
	yum update -y
	yum install -y wget vim nano net-tools initscripts gcc make tar bind-utils nc git unzip sysstat tree
SHELL

Vagrant.configure("2") do |config|

  config.trigger.after :up do |t|
    t.info = "Bringing up your Vagrant guest machine!"
    t.run = {inline: "vagrant vbguest --do install"}
  end

  if Vagrant.has_plugin?('vagrant-cachier')
       config.cache.auto_detect = true
       config.cache.scope = :box

       # and lets specifically use the apt cache (note, this is a Debian-ism)
       config.cache.enable :yum
       config.cache.enable :bower
       config.cache.enable :composer
       config.cache.enable :npm
       config.cache.enable :gem
  end

  if Vagrant.has_plugin?("vagrant-omnibus")
	config.omnibus.chef_version = "latest"
  end

  if Vagrant.has_plugin?("vagrant-hostmanager")
	config.hostmanager.enabled = true
	config.hostmanager.manage_guest = true
	config.hostmanager.manage_host = true
	config.hostmanager.ignore_private_ip = false
	config.hostmanager.include_offline = true
	config.hostmanager.aliases = %w(
	  intranet.dev
	)
  end

  (1..NODE_COUNT).each do |machineNo|
    config.vm.define "node#{machineNo}" do |subsystem|
      subsystem.vm.box = BOX_IMAGE
#	  if Vagrant.has_plugin?("vagrant-vbguest")
#    	subsystem.vbguest.installer_options = { 
#    	  allow_kernel_upgrade: true
#	    }
#  	  end

	  config.vm.define "my_cent_os_box" do |c|
		c.vbguest.installer_hooks[:before_install] = ["yum install -y epel-release", "sleep 1"]
	  end

	  subsystem.vm.provider :virtualbox do |vbox, override|
		vbox.gui = false
        vbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vbox.customize ["modifyvm", :id, "--memory", 512]
        vbox.customize ["modifyvm", :id, "--cableconnected1", "on"]
#        override.vm.box = 'CentOS 7 x64 Server'
        # override.vm.box_url = 'http://goo.gl/wxdwM'
      end

	  subsystem.vm.synced_folder "#{PATH_VAGRANT}", "/vagrant"
	  subsystem.vm.synced_folder "#{PATH_VAGRANT}/config", "/config"
	  subsystem.vm.synced_folder "../dist/", "/var/www/html"

	  subsystem.vm.network "public_network", bridge: "#$DEF_IF: Wi-Fi (AirPort)", ip: "192.168.1.#{machineNo+100}", auto_correct: true

#	  subsystem.vm.hostname = "lin_#{i}.dev"

#	  subsystem.hostmanager.aliases = %w(node_#{i}.localdomain node_#{i})

#	  subsystem.ssh.username = "vagrant"
#	  subsystem.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
#	  subsystem.ssh.insert_key = false

	  puts "=====================: active ports on: #{machineNo.to_i}"
	  # subsystem.vm.provision "shell", inline: 'touch /vagrant/ip_tables.rules', privileged: true
	  VAGRANT_JSON.dig(:ports).each do |item|
	  	$typ = item.dig(:typ).nil? ? 'tcp' : item.dig(:typ)
		onNode = item.dig(:nod).to_i
	  	if (onNode == machineNo.to_i-1 || onNode == -1)
			puts "{#{item.dig(:nfo)}}"
			subsystem.vm.network "forwarded_port", 
				guest: item.dig(:gst).to_i, 
				host: item.dig(:hst).to_i, 
				protocol: $typ, 
				id: $nfo, 
				auto_correct: true
			#subsystem.vm.provision "shell", inline: 'echo -e "\n" >> /vagrant/ip_tables.rules', privileged: true
		end
	  end

	  subsystem.vm.provision "shell", inline: 'sudo iptables -S', privileged: true


#	  subsystem.vm.provision "shell", inline: "echo -e $1 > /etc/nginx/conf.d/nginx.conf", args: "#{$reverseProxy} proxy_pass http://node_#{i};}}"
	  subsystem.vm.provision "shell", inline: "#{$bootScript}"

	  subsystem.vm.provision "chef_zero" do |chef|
	  	chef.log_level = "warn"
	    chef.install = false
		chef.arguments = "--chef-license accept -l debug -E lin --force-logger" # -j ./vm-config.json"

	    chef.cookbooks_path = "./chef/cookbooks"
	    chef.data_bags_path = "./chef/data-bags"
	    chef.roles_path = "./chef/roles"
	    chef.environments_path = "./chef/environments"
	    chef.nodes_path = "./chef/nodes"

	    chef.environment = "dev"
	    chef.add_role "api"
	    chef.add_role "web"

	    chef.run_list = VAGRANT_JSON.dig(:packages, :"node_#{machineNo}", :run_list)
	    chef.json = VAGRANT_JSON
	  end

	  subsystem.vm.provision "shell", inline: $userScript, privileged: false
	  subsystem.vm.provision "prechef", after: "chef", type: "shell", inline:<<-POSTSHELL
		sudo iptables-restore < /config/iptables.rules
	  POSTSHELL

    end
  end

  config.trigger.before :up do |t|
    t.info = "Bringing up your Vagrant guest machine!"
    t.run = {inline: "bash -c 'echo \"hey there!!\" > file.txt'"}
  end

end
